package com.example.financeflow

import android.content.Context
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.foundation.shape.RoundedCornerShape
import kotlinx.coroutines.launch
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import android.util.Log
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

class AIChatActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AIChatScreen(this) { finish() } // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        }
    }
}

@Composable
fun AIChatScreen(context: Context, onBackPressed: () -> Unit) {
    var userInput by remember { mutableStateOf("") }
    val chatHistory = remember { mutableStateListOf("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?") }
    val isLoading = remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .background(Color(0xFFF5F5F5))
    ) {
        Text(
            text = "AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            style = TextStyle(
                color = Color(0xFF1A3D62),
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold
            ),
            modifier = Modifier.padding(top = 20.dp, bottom = 20.dp)
        )

        Column(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
                .background(Color.White, RoundedCornerShape(12.dp))
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            chatHistory.forEach { message ->
                Text(
                    text = message,
                    style = TextStyle(
                        color = Color.Black,
                        fontSize = 16.sp
                    ),
                    modifier = Modifier.padding(vertical = 4.dp)
                )
            }
            if (isLoading.value) {
                CircularProgressIndicator(
                    modifier = Modifier.align(Alignment.CenterHorizontally).padding(top = 8.dp)
                )
            }
        }

        Row(
            modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            OutlinedTextField(
                value = userInput,
                onValueChange = { userInput = it },
                label = { Text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å") },
                modifier = Modifier.weight(1f).padding(end = 8.dp),
                shape = RoundedCornerShape(12.dp)
            )
            Button(
                onClick = {
                    if (userInput.isNotBlank()) {
                        chatHistory.add("–í—ã: $userInput")
                        coroutineScope.launch {
                            handleUserInput(userInput, chatHistory, isLoading, context)
                        }
                        userInput = ""
                    }
                },
                modifier = Modifier.size(56.dp),
                shape = RoundedCornerShape(50)
            ) {
                Text("üó®Ô∏è", fontSize = 24.sp)
            }
        }

        Button(
            onClick = onBackPressed,
            modifier = Modifier.fillMaxWidth().padding(top = 16.dp),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1A3D62))
        ) {
            Text("–ù–∞–∑–∞–¥", color = Color.White)
        }
    }
}

suspend fun handleUserInput(
    input: String,
    chatHistory: MutableList<String>,
    isLoading: MutableState<Boolean>,
    context: Context
) {
    val apiKey = BuildConfig.GROK_API_KEY
    val client = OkHttpClient()

    val messages = listOf(
        mapOf("role" to "system", "content" to "–í—ã - —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."),
        mapOf("role" to "user", "content" to input)
    )

    val json = Gson().toJson(mapOf(
        "messages" to messages,
        "model" to "grok-2-latest", // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω—É –º–æ–¥–µ–ª—å
        "stream" to false,
        "temperature" to 0
    ))

    val body = RequestBody.create("application/json".toMediaTypeOrNull(), json)
    val request = Request.Builder()
        .url("https://api.x.ai/v1/chat/completions") // –ó–∞–º—ñ–Ω—é—î–º–æ URL –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π
        .addHeader("Authorization", "Bearer $apiKey")
        .addHeader("Content-Type", "application/json")
        .post(body)
        .build()

    isLoading.value = true

    try {
        val response = client.newCall(request).execute()
        val responseBody = response.body?.string()
        Log.d("AIChatActivity", "–û—Ç–≤–µ—Ç –æ—Ç API: $responseBody")

        if (response.isSuccessful && responseBody != null) {
            val parsedResponse = parseGrokResponse(responseBody)
            withContext(Dispatchers.Main) {
                chatHistory.add("AI: $parsedResponse")
            }
        } else {
            withContext(Dispatchers.Main) {
                chatHistory.add("AI: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.")
                Toast.makeText(context, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI.", Toast.LENGTH_SHORT).show()
            }
        }
    } catch (e: Exception) {
        withContext(Dispatchers.Main) {
            chatHistory.add("AI: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            Log.e("AIChatActivity", "–û—à–∏–±–∫–∞ API-–∑–∞–ø—Ä–æ—Å–∞: ", e)
        }
    } finally {
        isLoading.value = false
    }
}

fun parseGrokResponse(responseBody: String): String {
    val jsonResponse: Map<String, Any> = Gson().fromJson(responseBody, object : TypeToken<Map<String, Any>>() {}.type)
    val choices = jsonResponse["choices"] as? List<Map<String, Any>> ?: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
    val message = choices.firstOrNull()?.get("message") as? Map<*, *>
    return message?.get("content") as? String ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"
}
