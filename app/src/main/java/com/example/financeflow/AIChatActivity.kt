package com.example.financeflow

import android.content.Context
import android.content.SharedPreferences
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.financeflow.ui.theme.FinanceFlowTheme
import com.example.financeflow.viewmodel.Expense
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import android.util.Log
import java.text.SimpleDateFormat
import java.util.*

class AIChatActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            FinanceFlowTheme {
                AIChatScreen(this) { finish() }
            }
        }
    }
}

@Composable
fun AIChatScreen(context: Context, onBackPressed: () -> Unit) {
    val sharedPreferences = context.getSharedPreferences("finance_flow_prefs", Context.MODE_PRIVATE)
    var userInput by remember { mutableStateOf("") }
    val chatHistory = remember { mutableStateListOf("AI: –ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ç–≤–æ—ó–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏?") }
    val isLoading = remember { mutableStateOf(false) }
    val coroutineScope = rememberCoroutineScope()
    val scrollState = rememberScrollState()

    val expenses = loadExpenses(sharedPreferences)
    val currentBalance = sharedPreferences.getFloat("current_balance", 0f).toDouble()
    Log.d("AIChatActivity", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç: ${expenses.size}, –¥–∞–Ω—ñ: ${expenses.joinToString()}")
    Log.d("AIChatActivity", "–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ‚Ç¥$currentBalance")

    val predefinedQuestions = listOf(
        "–Ø–∫—ñ –º–æ—ó –Ω–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏?",
        "–ß–∏ –º–æ–∂—É —è –∑–∞–æ—â–∞–¥–∏—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?",
        "–°–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É?",
        "–Ø–∫–∏–π –º—ñ–π —Å–µ—Ä–µ–¥–Ω—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π –≤–∏—Ç—Ä–∞—Ç–∞?",
        "–ù–∞ —á–æ–º—É –º–µ–Ω—ñ —Å–ª—ñ–¥ –µ–∫–æ–Ω–æ–º–∏—Ç–∏, —â–æ–± –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ 3000 –≥—Ä–∏–≤–µ–Ω—å?",
        "–Ø–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –º–µ–Ω–µ –±—É–ª–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?",
        "–ß–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –º–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ –º–æ—ó –∫–æ—à—Ç–∏?",
        "–°–∫—ñ–ª—å–∫–∏ —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –≥—Ä–æ—à–µ–π?",
        "–°–∫—ñ–ª—å–∫–∏ —è –≤—á–æ—Ä–∞ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∞?",
        "–°–∫—ñ–ª—å–∫–∏ —è —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∞?"
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF5F7FA))
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp)
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(Color(0xFF1A3D62), Color(0xFF2E5B8C))
                    )
                )
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 16.dp)
        ) {
            Text(
                text = "AI –ê—Å–∏—Å—Ç–µ–Ω—Ç",
                style = TextStyle(
                    color = Color.White,
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold
                ),
                modifier = Modifier
                    .padding(top = 16.dp, bottom = 24.dp)
                    .align(Alignment.CenterHorizontally)
            )

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .padding(horizontal = 16.dp)
                    .shadow(4.dp, RoundedCornerShape(12.dp)),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp)
                        .verticalScroll(scrollState)
                ) {
                    chatHistory.forEach { message ->
                        Text(
                            text = message,
                            style = TextStyle(
                                color = if (message.startsWith("AI:")) Color(0xFF1A3D62) else Color.Black,
                                fontSize = 16.sp
                            ),
                            modifier = Modifier.padding(vertical = 4.dp)
                        )
                    }
                    if (isLoading.value) {
                        CircularProgressIndicator(
                            modifier = Modifier.align(Alignment.CenterHorizontally).padding(top = 8.dp)
                        )
                    }
                }
            }

            LazyColumn(
                modifier = Modifier
                    .fillMaxWidth()
                    .heightIn(max = 120.dp)
                    .padding(horizontal = 16.dp, vertical = 8.dp)
            ) {
                items(predefinedQuestions) { question ->
                    Text(
                        text = question,
                        style = TextStyle(
                            color = Color(0xFF1A3D62),
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium
                        ),
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .background(Color.White, RoundedCornerShape(8.dp))
                            .shadow(2.dp, RoundedCornerShape(8.dp))
                            .padding(8.dp)
                            .clickable {
                                chatHistory.add("–í–∏: $question")
                                coroutineScope.launch {
                                    handleUserInput(question, chatHistory, isLoading, expenses, currentBalance, context)
                                }
                            }
                    )
                }
            }

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp)
                    .shadow(4.dp, RoundedCornerShape(12.dp)),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                shape = RoundedCornerShape(12.dp)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    OutlinedTextField(
                        value = userInput,
                        onValueChange = {
                            userInput = it
                            Log.d("AIChatActivity", "–û–Ω–æ–≤–ª–µ–Ω–æ userInput: '$userInput'")
                        },
                        label = { Text("–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç") },
                        modifier = Modifier
                            .weight(1f)
                            .padding(end = 8.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = TextFieldDefaults.colors(
                            focusedIndicatorColor = Color(0xFF4A7BA6),
                            unfocusedIndicatorColor = Color.Gray,
                            cursorColor = Color(0xFF1A3D62)
                        )
                    )
                    Button(
                        onClick = {
                            if (userInput.isNotBlank()) {
                                val inputToSend = userInput
                                Log.d("AIChatActivity", "–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ: '$inputToSend'")
                                chatHistory.add("–í–∏: $inputToSend")
                                coroutineScope.launch {
                                    handleUserInput(inputToSend, chatHistory, isLoading, expenses, currentBalance, context)
                                }
                                userInput = ""
                            } else {
                                Log.d("AIChatActivity", "userInput –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            }
                        },
                        modifier = Modifier.size(48.dp),
                        shape = RoundedCornerShape(50),
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A7BA6))
                    ) {
                        Text("üó®Ô∏è", fontSize = 20.sp, color = Color.White)
                    }
                }
            }

            Button(
                onClick = onBackPressed,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
                    .height(56.dp)
                    .shadow(4.dp, RoundedCornerShape(12.dp)),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4A7BA6)),
                shape = RoundedCornerShape(12.dp),
                elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)
            ) {
                Text(
                    text = "–ù–∞–∑–∞–¥",
                    color = Color.White,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

suspend fun handleUserInput(
    input: String,
    chatHistory: MutableList<String>,
    isLoading: MutableState<Boolean>,
    expenses: List<Expense>,
    currentBalance: Double,
    context: Context
) {
    isLoading.value = true

    try {
        Log.d("AIChatActivity", "–í—Ö—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç: '$input'")
        Log.d("AIChatActivity", "–°–ø–∏—Å–æ–∫ –≤–∏—Ç—Ä–∞—Ç: ${expenses.joinToString()}")
        Log.d("AIChatActivity", "–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ‚Ç¥$currentBalance")

        if (expenses.isEmpty() && currentBalance == 0.0) {
            withContext(Dispatchers.Main) {
                chatHistory.add("AI: –£ –º–µ–Ω–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —á–∏ –∫–æ—à—Ç–∏.")
            }
            return
        }

        val inputLower = input.trim().lowercase()
        Log.d("AIChatActivity", "–ó–∞–ø–∏—Ç —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ: '$inputLower'")

        val totalSpent = expenses.sumOf { it.amount }
        val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())
        val currentDate = Calendar.getInstance().apply { time = Date() } // –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞: 20.03.2025
        val currentMonth = currentDate.get(Calendar.MONTH) + 1

        when {
            inputLower == "—è–∫—ñ –º–æ—ó –Ω–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏?" -> {
                val maxExpense = expenses.groupBy { it.category }
                    .mapValues { it.value.sumOf { expense -> expense.amount } }
                    .maxByOrNull { it.value }
                val response = "–í–∞—à—ñ –Ω–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ ‚Äî —Ü–µ ${maxExpense?.key} (‚Ç¥${maxExpense?.value})."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower == "—á–∏ –º–æ–∂—É —è –∑–∞–æ—â–∞–¥–∏—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?" -> {
                val thisMonthExpenses = expenses.filter {
                    val expenseDate = dateFormat.parse(it.date.split(" ")[0])
                    expenseDate?.let { date -> Calendar.getInstance().apply { time = date }.get(Calendar.MONTH) + 1 == currentMonth } ?: false
                }.sumOf { it.amount }
                val savingsPotential = currentBalance - thisMonthExpenses
                val response = if (savingsPotential > 0) {
                    "–¢–∞–∫, –∑ –≤–∞—à–∏–º –ø–æ—Ç–æ—á–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º (‚Ç¥$currentBalance) –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–æ—â–∞–¥–∏—Ç–∏ ‚Ç¥${String.format("%.2f", savingsPotential)} —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è."
                } else {
                    "–ù—ñ, –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è (‚Ç¥$thisMonthExpenses) –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å (‚Ç¥$currentBalance) –Ω–∞ ‚Ç¥${String.format("%.2f", -savingsPotential)}."
                }
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower == "—Å–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É?" -> {
                val foodExpenses = expenses.filter { it.category == "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è" }.sumOf { it.amount }
                val response = "–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —ó–∂—É ‚Ç¥$foodExpenses."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower == "—è–∫–∏–π –º—ñ–π —Å–µ—Ä–µ–¥–Ω—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π –≤–∏—Ç—Ä–∞—Ç–∞?" -> {
                val uniqueDays = expenses.map { it.date.split(" ")[0] }.distinct().size
                val averageDaily = totalSpent / uniqueDays
                val response = "–í–∞—à —Å–µ—Ä–µ–¥–Ω—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π –≤–∏—Ç—Ä–∞—Ç–∞ ‚Äî ‚Ç¥${String.format("%.2f", averageDaily)}."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –≤—á–æ—Ä–∞ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∞?") || inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –≤—á–æ—Ä–∞ –≤–∏—Ç—Ä–∞—Ç–∏–≤?") ||
                    inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –≤—á–æ—Ä–∞ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞?") || inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –≤—á–æ—Ä–∞ –ø–æ—Ç—Ä–∞—Ç–∏–≤?") -> {
                val yesterday = Calendar.getInstance().apply {
                    time = Date()
                    add(Calendar.DAY_OF_YEAR, -1) // –í—á–æ—Ä–∞—à–Ω—è –¥–∞—Ç–∞
                }
                val yesterdayStr = dateFormat.format(yesterday.time)
                val yesterdayExpenses = expenses.filter {
                    it.date.split(" ")[0] == yesterdayStr
                }.sumOf { it.amount }
                val response = "–í—á–æ—Ä–∞ (${yesterdayStr}) –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ ‚Ç¥${String.format("%.2f", yesterdayExpenses)}."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∞?") || inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏–≤?") ||
                    inputLower.contains("—Å–∫–æ–ª—å–∫–æ —è —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞?") || inputLower.contains("—Å–∫–æ–ª—å–∫–æ —è —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—Ä–∞—Ç–∏–≤?") -> {
                val todayStr = dateFormat.format(currentDate.time)
                val todayExpenses = expenses.filter {
                    it.date.split(" ")[0] == todayStr
                }.sumOf { it.amount }
                val response = "–°—å–æ–≥–æ–¥–Ω—ñ (${todayStr}) –≤–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ ‚Ç¥${String.format("%.2f", todayExpenses)}."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤") || inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–ª–∞") -> {
                val categoryMatch = Regex("–Ω–∞ ([–∞-—è—ó—î]+)").find(inputLower)?.groupValues?.get(1)
                val dateRangeMatch = Regex("–∑ (\\d+\\.\\d+) –ø–æ (\\d+\\.\\d+)").find(inputLower)
                val singleDateMatch = if (dateRangeMatch == null) Regex("(\\d+\\.\\d+)").find(inputLower) else null

                val category = when (categoryMatch?.lowercase()) {
                    "—ó–∂—É", "—Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è" -> "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è"
                    "–∂–∏—Ç–ª–æ" -> "–ñ–∏—Ç–ª–æ"
                    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" -> "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                    "–º–µ–¥–∏—Ü–∏–Ω—É" -> "–ú–µ–¥–∏—Ü–∏–Ω–∞"
                    "–æ–¥—è–≥" -> "–û–¥—è–≥"
                    "—Å–ø–æ—Ä—Ç" -> "–°–ø–æ—Ä—Ç"
                    "—Ç–µ—Ö–Ω—ñ–∫—É" -> "–¢–µ—Ö–Ω—ñ–∫–∞"
                    else -> null
                }

                if (category != null) {
                    val filteredExpenses = if (dateRangeMatch != null) {
                        val startDateStr = dateRangeMatch.groupValues[1]
                        val endDateStr = dateRangeMatch.groupValues[2]
                        filterExpensesByDateRange(expenses, startDateStr, endDateStr)
                    } else if (singleDateMatch != null) {
                        val dateStr = singleDateMatch.groupValues[1]
                        filterExpensesBySingleDate(expenses, dateStr)
                    } else {
                        expenses
                    }

                    val categoryExpenses = filteredExpenses.filter { it.category == category }.sumOf { it.amount }
                    val response = when {
                        dateRangeMatch != null -> "–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ $category ‚Ç¥$categoryExpenses –∑ ${dateRangeMatch.groupValues[1]} –ø–æ ${dateRangeMatch.groupValues[2]}."
                        singleDateMatch != null -> "–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ $category ‚Ç¥$categoryExpenses ${singleDateMatch.groupValues[1]}."
                        else -> "–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ $category ‚Ç¥$categoryExpenses –∑–∞–≥–∞–ª–æ–º."
                    }
                    withContext(Dispatchers.Main) {
                        chatHistory.add("AI: $response")
                    }
                } else {
                    withContext(Dispatchers.Main) {
                        chatHistory.add("AI: –Ø –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–∞–∑–∞—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '—ó–∂—É', '–∂–∏—Ç–ª–æ' —Ç–æ—â–æ.")
                    }
                }
            }
            inputLower.contains("–Ω–∞ —á–æ–º—É –º–µ–Ω—ñ —Å–ª—ñ–¥ –µ–∫–æ–Ω–æ–º–∏—Ç–∏") || inputLower.contains("—è–∫ –º–µ–Ω—ñ –∑–∞–æ—â–∞–¥–∏—Ç–∏") -> {
                val savingsGoalMatch = Regex("(\\d+)\\s*–≥—Ä–∏–≤–µ–Ω—å").find(inputLower)
                val savingsGoal = savingsGoalMatch?.groupValues?.get(1)?.toDoubleOrNull() ?: 0.0

                if (currentBalance >= savingsGoal) {
                    val response = "–ó –≤–∞—à–∏–º –ø–æ—Ç–æ—á–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º (‚Ç¥$currentBalance) –≤–∏ –≤–∂–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ ‚Ç¥$savingsGoal."
                    withContext(Dispatchers.Main) {
                        chatHistory.add("AI: $response")
                    }
                } else {
                    val deficit = savingsGoal - currentBalance
                    val categoryTotals = expenses.groupBy { it.category }
                        .mapValues { it.value.sumOf { expense -> expense.amount } }
                        .entries.sortedByDescending { it.value }

                    val suggestions = mutableListOf<String>()
                    var remainingDeficit = deficit
                    for ((category, amount) in categoryTotals) {
                        if (remainingDeficit > 0 && amount > 0) {
                            val reduction = minOf(amount, remainingDeficit)
                            suggestions.add("–°–∫–æ—Ä–æ—Ç—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ $category –Ω–∞ ‚Ç¥${String.format("%.2f", reduction)}")
                            remainingDeficit -= reduction
                        }
                    }

                    val response = if (suggestions.isNotEmpty()) {
                        "–©–æ–± –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ ‚Ç¥$savingsGoal –∑ –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º (‚Ç¥$currentBalance), –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–æ—â–∞–¥–∏—Ç–∏ ‚Ç¥${String.format("%.2f", deficit)}. " +
                                "–û—Å—å —â–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:\n" + suggestions.joinToString("\n")
                    } else {
                        "–í–∞—à –±–∞–ª–∞–Ω—Å (‚Ç¥$currentBalance) –∑–∞–º–∞–ª–∏–π, —â–æ–± –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ ‚Ç¥$savingsGoal, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –≤—Å—ñ –≤–∏—Ç—Ä–∞—Ç–∏."
                    }
                    withContext(Dispatchers.Main) {
                        chatHistory.add("AI: $response")
                    }
                }
            }
            inputLower.contains("—è–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –º–µ–Ω–µ –±—É–ª–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?") -> {
                val thisMonthExpenses = expenses.filter {
                    val expenseDate = dateFormat.parse(it.date.split(" ")[0])
                    expenseDate?.let { date -> Calendar.getInstance().apply { time = date }.get(Calendar.MONTH) + 1 == currentMonth } ?: false
                }
                val summary = thisMonthExpenses.groupBy { it.category }
                    .map { "${it.key}: ‚Ç¥${it.value.sumOf { expense -> expense.amount }}" }
                    .joinToString("\n")
                val totalThisMonth = thisMonthExpenses.sumOf { it.amount }
                val response = "–í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è:\n$summary\n–ó–∞–≥–∞–ª–æ–º: ‚Ç¥$totalThisMonth"
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—á–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –º–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ –º–æ—ó –∫–æ—à—Ç–∏?") -> {
                val response = if (totalSpent > currentBalance) {
                    "–¢–∞–∫, –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (‚Ç¥$totalSpent) –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –≤–∞—à—ñ –∫–æ—à—Ç–∏ (‚Ç¥$currentBalance) –Ω–∞ ‚Ç¥${String.format("%.2f", totalSpent - currentBalance)}."
                } else {
                    "–ù—ñ, –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (‚Ç¥$totalSpent) –º–µ–Ω—à—ñ –∑–∞ –≤–∞—à—ñ –∫–æ—à—Ç–∏ (‚Ç¥$currentBalance), —É –≤–∞—Å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è ‚Ç¥${String.format("%.2f", currentBalance - totalSpent)}."
                }
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—è–∫–∞ –º–æ—è –Ω–∞–π–¥–æ—Ä–æ–∂—á–∞ –ø–æ–∫—É–ø–∫–∞?") -> {
                val mostExpensive = expenses.maxByOrNull { it.amount }
                val response = if (mostExpensive != null) {
                    "–í–∞—à–∞ –Ω–∞–π–¥–æ—Ä–æ–∂—á–∞ –ø–æ–∫—É–ø–∫–∞ ‚Äî —Ü–µ ${mostExpensive.category} –Ω–∞ —Å—É–º—É ‚Ç¥${mostExpensive.amount} –≤—ñ–¥ ${mostExpensive.date}."
                } else {
                    "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –ø–æ–∫—É–ø–∫–∏."
                }
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —è –º–æ–∂—É –≤—ñ–¥–∫–ª–∞—Å—Ç–∏?") -> {
                val savingsPotential = currentBalance - totalSpent
                val response = if (savingsPotential > 0) {
                    "–ó –≤–∞—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º (‚Ç¥$currentBalance) —ñ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏ (‚Ç¥$totalSpent) –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ ‚Ç¥${String.format("%.2f", savingsPotential)}."
                } else {
                    "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ –Ω—ñ—á–æ–≥–æ, –±–æ –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (‚Ç¥$totalSpent) –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –±–∞–ª–∞–Ω—Å (‚Ç¥$currentBalance) –Ω–∞ ‚Ç¥${String.format("%.2f", -savingsPotential)}."
                }
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—è–∫—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç —É –º–µ–Ω–µ —î?") -> {
                val categories = expenses.map { it.category }.distinct().joinToString(", ")
                val response = "–í–∞—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç: $categories."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —è –≤–∏—Ç—Ä–∞—á–∞–≤ –≥—Ä–æ—à—ñ?") -> {
                val uniqueDays = expenses.map { it.date.split(" ")[0] }.distinct().size
                val response = "–í–∏ –≤–∏—Ç—Ä–∞—á–∞–ª–∏ –≥—Ä–æ—à—ñ –ø—Ä–æ—Ç—è–≥–æ–º $uniqueDays –¥–Ω—ñ–≤."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            inputLower.contains("—Å–∫—ñ–ª—å–∫–∏ —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –≥—Ä–æ—à–µ–π?") -> {
                val response = "–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å —î ‚Ç¥${String.format("%.2f", currentBalance)}."
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
            else -> {
                Log.d("AIChatActivity", "–ñ–æ–¥–Ω–∞ —É–º–æ–≤–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞, –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
                val response = when {
                    inputLower.contains("–≤–∏—Ç—Ä–∞—Ç–∏") -> "–Ø –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –≤–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ '–Ø–∫—ñ –º–æ—ó –Ω–∞–π–±—ñ–ª—å—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏?' –∞–±–æ '–°–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É?'"
                    inputLower.contains("–≥—Ä–æ—à—ñ") || inputLower.contains("–∫–æ—à—Ç–∏") -> "–•–æ—á–µ—Ç–µ –∑–Ω–∞—Ç–∏ –ø—Ä–æ –≤–∞—à—ñ –∫–æ—à—Ç–∏? –°–ø—Ä–æ–±—É–π—Ç–µ '–°–∫—ñ–ª—å–∫–∏ —É –º–µ–Ω–µ –∑–∞—Ä–∞–∑ –≥—Ä–æ—à–µ–π?' –∞–±–æ '–ß–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –º–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏ –º–æ—ó –∫–æ—à—Ç–∏?'"
                    inputLower.contains("–∑–∞–æ—â–∞–¥–∏—Ç–∏") || inputLower.contains("–µ–∫–æ–Ω–æ–º–∏—Ç–∏") -> "–•–æ—á–µ—Ç–µ –∑–∞–æ—â–∞–¥–∏—Ç–∏? –°–ø—Ä–æ–±—É–π—Ç–µ '–ù–∞ —á–æ–º—É –º–µ–Ω—ñ —Å–ª—ñ–¥ –µ–∫–æ–Ω–æ–º–∏—Ç–∏, —â–æ–± –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ 3000 –≥—Ä–∏–≤–µ–Ω—å?'"
                    inputLower.contains("–ø–æ–∫—É–ø–∫–∞") -> "–¶—ñ–∫–∞–≤–ª—è—Ç—å –ø–æ–∫—É–ø–∫–∏? –°–ø—Ä–æ–±—É–π—Ç–µ '–Ø–∫–∞ –º–æ—è –Ω–∞–π–¥–æ—Ä–æ–∂—á–∞ –ø–æ–∫—É–ø–∫–∞?'"
                    inputLower.contains("—Å–∫—ñ–ª—å–∫–∏") -> "–•–æ—á–µ—Ç–µ –∑–Ω–∞—Ç–∏ —Å—É–º—É? –£—Ç–æ—á–Ω—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–°–∫—ñ–ª—å–∫–∏ —è –º–æ–∂—É –≤—ñ–¥–∫–ª–∞—Å—Ç–∏?' –∞–±–æ '–°–∫—ñ–ª—å–∫–∏ —è –≤–∏—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ —ó–∂—É?'"
                    else -> "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ —â–æ—Å—å –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏, –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è —á–∏ –≤–∞—à—ñ –∫–æ—à—Ç–∏."
                }
                withContext(Dispatchers.Main) {
                    chatHistory.add("AI: $response")
                }
            }
        }
    } catch (e: Exception) {
        withContext(Dispatchers.Main) {
            chatHistory.add("AI: –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ${e.message}")
            Log.e("AIChatActivity", "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ", e)
        }
    } finally {
        isLoading.value = false
    }
}

fun filterExpensesByDateRange(expenses: List<Expense>, startDateStr: String, endDateStr: String): List<Expense> {
    val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())
    val currentYear = Calendar.getInstance().get(Calendar.YEAR)

    val startDateFull = if (startDateStr.split(".").size == 2) "$startDateStr.$currentYear" else startDateStr
    val endDateFull = if (endDateStr.split(".").size == 2) "$endDateStr.$currentYear" else endDateStr

    val startDate = dateFormat.parse(startDateFull) ?: run {
        Log.e("AIChatActivity", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É: $startDateFull")
        return emptyList()
    }
    val endDate = dateFormat.parse(endDateFull) ?: run {
        Log.e("AIChatActivity", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É: $endDateFull")
        return emptyList()
    }

    return expenses.filter { expense ->
        val expenseDateStr = expense.date.split(" ")[0]
        val expenseDate = dateFormat.parse(expenseDateStr) ?: return@filter false
        expenseDate in startDate..endDate
    }
}

fun filterExpensesBySingleDate(expenses: List<Expense>, dateStr: String): List<Expense> {
    val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())
    val currentYear = Calendar.getInstance().get(Calendar.YEAR)

    val dateFull = if (dateStr.split(".").size == 2) "$dateStr.$currentYear" else dateStr
    val targetDate = dateFormat.parse(dateFull) ?: run {
        Log.e("AIChatActivity", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É: $dateFull")
        return emptyList()
    }

    return expenses.filter { expense ->
        val expenseDateStr = expense.date.split(" ")[0]
        val expenseDate = dateFormat.parse(expenseDateStr) ?: return@filter false
        expenseDate == targetDate
    }
}

fun analyzeExpenses(expenses: List<Expense>): String {
    if (expenses.isEmpty()) return "–î–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ."

    val totalSpent = expenses.sumOf { it.amount }
    val categorySummary = expenses.groupBy { it.category }
        .map { "$it.key: ‚Ç¥${it.value.sumOf { expense -> expense.amount }}" }
        .joinToString(", ")
    val averageDaily = totalSpent / (expenses.map { it.date.split(" ")[0] }.distinct().size)

    return """
        –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: ‚Ç¥$totalSpent
        –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏: $categorySummary
        –°–µ—Ä–µ–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –¥–µ–Ω—å: ‚Ç¥${String.format("%.2f", averageDaily)}
    """.trimIndent()
}
